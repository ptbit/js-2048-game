{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCAA,SAAS,gBAAgB,CAAC,mBAAoB,WAwBnC,IAAA,EAAT,SAAqB,CAAK,EACxB,GAAgB,EAChB,EAAiB,WAAW,CAAG,EAE3B,GAAS,MACX,EAAW,SAAS,CAAC,MAAM,CAAC,SAEhC,EAGS,EAAT,e,EACE,EAAS,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAAG,MAAM,K,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAAO,GAAG,CAAC,WAAM,OAAA,MAAM,GAAM,IAAI,CAAC,E,GAEpD,IACA,IACA,GACF,EAGS,EAAT,WAIE,IAAK,IAHC,EAAa,EAAE,CAGZ,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACJ,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,EAAW,IAAI,CAAC,CAAE,IAAK,EAAG,IAAK,CAAE,GAMvC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EACJ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAC3D,CAAA,CAAK,CAAC,EAAgB,GAAG,CAAC,CAAC,EAAgB,GAAG,CAAC,CAC7C,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAK5B,AAJa,SAAS,aAAa,CAChC,cAAgD,MAAA,CAAnC,EAAgB,GAAG,CAAC,iBAAmC,MAAA,CAApB,EAAgB,GAAG,CAAC,OAGlE,SAAS,CAAC,GAAG,CAAC,WACrB,CACF,EAGS,EAAT,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IAAK,CAC7B,IAAM,EAAa,CAAK,CAAC,EA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","sources":["<anon>","src/script.js"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateScore = // Function to update the score\n    function updateScore(value) {\n        currentScore += value;\n        currentScoreElem.textContent = currentScore;\n        if (value >= 2048) winMessage.classList.remove(\"hidden\");\n    };\n    var initializeGame = // Function to initialize the game\n    function initializeGame() {\n        board = _to_consumable_array(Array(size)).map(function() {\n            return Array(size).fill(0);\n        });\n        placeRandom();\n        placeRandom();\n        renderBoard();\n    };\n    var placeRandom = // Function to add 2 or 4 on random free cell\n    function placeRandom() {\n        var emptyCells = [];\n        //Find all empty cells\n        for(var i = 0; i < size; i++){\n            for(var j = 0; j < size; j++)if (board[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        // if we have free slot...\n        if (emptyCells.length > 0) {\n            var randomEmptyCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            board[randomEmptyCell.row][randomEmptyCell.col] = Math.random() < 0.9 ? 2 : 4;\n            var cell = document.querySelector('[data-row=\"'.concat(randomEmptyCell.row, '\"][data-col=\"').concat(randomEmptyCell.col, '\"]'));\n            cell.classList.add(\"new-tile\");\n        }\n    };\n    var renderBoard = // Function that displays all changes on the board\n    function renderBoard() {\n        for(var i = 0; i < size; i++)for(var j = 0; j < size; j++){\n            var boardValue = board[i][j];\n            var cell = document.querySelector(\"[data-row='\".concat(i, \"'][data-col='\").concat(j, \"']\"));\n            var cellValue = cell.dataset.value;\n            if (boardValue !== 0) {\n                cell.dataset.value = boardValue;\n                cell.textContent = boardValue;\n                // Animation handling\n                if (boardValue !== +cellValue && !cell.classList.contains(\"new-tile\")) cell.classList.add(\"merged-tile\");\n            } else {\n                cell.dataset.value = 0;\n                cell.textContent = \"\";\n                cell.classList.remove(\"merged-tile\", \"new-tile\");\n            }\n        }\n    };\n    var move = function move(direction) {\n        var needRender = false;\n        if (direction === \"ArrowLeft\") {\n            for(var i = 0; i < board.length; i++){\n                var movedRow = moveLeft(board[i]);\n                board[i] = movedRow;\n            }\n            needRender = true;\n        }\n        if (direction === \"ArrowRight\") {\n            for(var i1 = 0; i1 < board.length; i1++){\n                var movedRow1 = moveRight(board[i1]);\n                board[i1] = movedRow1;\n            }\n            needRender = true;\n        }\n        if (direction === \"ArrowDown\" || direction === \"ArrowUp\") {\n            for(var i2 = 0; i2 < size; i2++){\n                var verticalRow = [];\n                for(var j = 0; j < size; j++){\n                    var element = board[j][i2];\n                    verticalRow.push(element);\n                }\n                var uppedVerticalRow = direction === \"ArrowUp\" ? moveLeft(verticalRow) : moveRight(verticalRow);\n                for(var j1 = 0; j1 < uppedVerticalRow.length; j1++)board[j1][i2] = uppedVerticalRow[j1];\n            }\n            needRender = true;\n        }\n        if (needRender) {\n            placeRandom();\n            renderBoard();\n            gameOverCheck();\n        }\n        //Emulate finish game cases\n        if (direction === \"e\") {\n            console.log(\"emulate lose game case\");\n            emulateLoseGame();\n            gameOverCheck();\n        }\n        if (direction === \"w\") {\n            console.log(\"emulate win game case\");\n            emulateWinGame();\n            gameOverCheck();\n        }\n    };\n    var moveRight = function moveRight(row) {\n        var noZeroRow = row.filter(function(cell) {\n            return cell !== 0;\n        });\n        var moveRightRow = [];\n        for(var i = noZeroRow.length - 1; i >= 0; i--){\n            var cell = noZeroRow[i];\n            if (cell === noZeroRow[i - 1]) {\n                moveRightRow.push(cell * 2);\n                updateScore(cell * 2);\n                i--;\n            } else moveRightRow.push(cell);\n        }\n        moveRightRow.reverse();\n        while(moveRightRow.length < 4)moveRightRow.unshift(0);\n        return moveRightRow;\n    };\n    var moveLeft = function moveLeft(row) {\n        var noZeroRow = row.filter(function(cell) {\n            return cell !== 0;\n        });\n        var moveLeftRow = [];\n        for(var i = 0; i < noZeroRow.length; i++){\n            var cell = noZeroRow[i];\n            if (cell === noZeroRow[i + 1]) {\n                moveLeftRow.push(cell * 2);\n                updateScore(cell * 2);\n                i++;\n            } else moveLeftRow.push(cell);\n        }\n        while(moveLeftRow.length < 4)moveLeftRow.push(0);\n        return moveLeftRow;\n    };\n    var emulateWinGame = function emulateWinGame() {\n        var emulateBoard = [\n            [\n                2,\n                4,\n                8,\n                16\n            ],\n            [\n                32,\n                64,\n                128,\n                256\n            ],\n            [\n                512,\n                1024,\n                2048,\n                0\n            ],\n            [\n                0,\n                1024,\n                1024,\n                4096\n            ]\n        ];\n        board = emulateBoard;\n        renderBoard();\n    };\n    var emulateLoseGame = function emulateLoseGame() {\n        var emulateBoard = [\n            [\n                2,\n                4,\n                2,\n                4\n            ],\n            [\n                4,\n                2,\n                4,\n                2\n            ],\n            [\n                2,\n                4,\n                8,\n                4\n            ],\n            [\n                4,\n                8,\n                2,\n                0\n            ]\n        ];\n        board = emulateBoard;\n        renderBoard();\n    };\n    var gameOverCheck = function gameOverCheck() {\n        //Find empty cell\n        for(var i = 0; i < size; i++)for(var j = 0; j < size; j++){\n            if (board[i][j] === 0) return;\n        }\n        //Check vertical marge\n        for(var i1 = 0; i1 < size - 1; i1++)for(var j1 = 0; j1 < size; j1++){\n            if (board[i1][j1] === board[i1 + 1][j1]) return;\n        }\n        //Check horizontal marge\n        for(var i2 = 0; i2 < size; i2++)for(var j2 = 0; j2 < size - 1; j2++){\n            if (board[i2][j2] === board[i2][j2 + 1]) return;\n        }\n        loseMessage.classList.remove(\"hidden\");\n    };\n    var button = document.querySelector(\".button.start\");\n    var currentScoreElem = document.querySelector(\".game-score\");\n    var startMessage = document.querySelector(\".message-start\");\n    var winMessage = document.querySelector(\".message-win\");\n    var loseMessage = document.querySelector(\".message-lose\");\n    var size = 4;\n    var board = [];\n    var currentScore = 0;\n    button.addEventListener(\"click\", function() {\n        initializeGame();\n        updateScore(0);\n        currentScore = 0;\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        startMessage.classList.add(\"hidden\");\n        winMessage.classList.add(\"hidden\");\n        loseMessage.classList.add(\"hidden\");\n    });\n    document.addEventListener(\"keydown\", function(event) {\n        return move(event.key);\n    });\n});\n\n//# sourceMappingURL=index.320935e2.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n  const button = document.querySelector('.button.start');\n  const currentScoreElem = document.querySelector('.game-score');\n  const startMessage = document.querySelector('.message-start');\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n\n  const size = 4;\n  let board = [];\n  let currentScore = 0;\n\n  button.addEventListener('click', () => {\n    initializeGame();\n    updateScore(0);\n    currentScore = 0;\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    startMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  });\n\n  // Function to update the score\n  function updateScore(value) {\n    currentScore += value;\n    currentScoreElem.textContent = currentScore;\n\n    if (value >= 2048) {\n      winMessage.classList.remove('hidden');\n    }\n  }\n\n  // Function to initialize the game\n  function initializeGame() {\n    board = [...Array(size)].map(() => Array(size).fill(0));\n\n    placeRandom();\n    placeRandom();\n    renderBoard();\n  }\n\n  // Function to add 2 or 4 on random free cell\n  function placeRandom() {\n    const emptyCells = [];\n\n    //Find all empty cells\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    // if we have free slot...\n    if (emptyCells.length > 0) {\n      const randomEmptyCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      board[randomEmptyCell.row][randomEmptyCell.col] =\n        Math.random() < 0.9 ? 2 : 4;\n      const cell = document.querySelector(\n        `[data-row=\"${randomEmptyCell.row}\"][data-col=\"${randomEmptyCell.col}\"]`\n      );\n\n      cell.classList.add('new-tile');\n    }\n  }\n\n  // Function that displays all changes on the board\n  function renderBoard() {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const boardValue = board[i][j];\n        const cell = document.querySelector(\n          `[data-row='${i}'][data-col='${j}']`\n        );\n        const cellValue = cell.dataset.value;\n        if (boardValue !== 0) {\n          cell.dataset.value = boardValue;\n          cell.textContent = boardValue;\n          // Animation handling\n          if (\n            boardValue !== +cellValue &&\n            !cell.classList.contains('new-tile')\n          ) {\n            cell.classList.add('merged-tile');\n          }\n        } else {\n          cell.dataset.value = 0;\n          cell.textContent = '';\n          cell.classList.remove('merged-tile', 'new-tile');\n        }\n      }\n    }\n  }\n\n  function move(direction) {\n    let needRender = false;\n\n    if (direction === 'ArrowLeft') {\n      for (let i = 0; i < board.length; i++) {\n        const movedRow = moveLeft(board[i]);\n        board[i] = movedRow;\n      }\n      needRender = true;\n    }\n\n    if (direction === 'ArrowRight') {\n      for (let i = 0; i < board.length; i++) {\n        const movedRow = moveRight(board[i]);\n        board[i] = movedRow;\n      }\n      needRender = true;\n    }\n\n    if (direction === 'ArrowDown' || direction === 'ArrowUp') {\n      for (let i = 0; i < size; i++) {\n        const verticalRow = [];\n        for (let j = 0; j < size; j++) {\n          const element = board[j][i];\n          verticalRow.push(element);\n        }\n        const uppedVerticalRow =\n          direction === 'ArrowUp'\n            ? moveLeft(verticalRow)\n            : moveRight(verticalRow);\n        for (let j = 0; j < uppedVerticalRow.length; j++) {\n          board[j][i] = uppedVerticalRow[j];\n        }\n      }\n      needRender = true;\n    }\n\n    if (needRender) {\n      placeRandom();\n      renderBoard();\n      gameOverCheck();\n    }\n\n    //Emulate finish game cases\n    if (direction === 'e') {\n      console.log('emulate lose game case');\n      emulateLoseGame();\n      gameOverCheck();\n    }\n\n    if (direction === 'w') {\n      console.log('emulate win game case');\n      emulateWinGame();\n      gameOverCheck();\n    }\n  }\n\n  function moveRight(row) {\n    const noZeroRow = row.filter((cell) => cell !== 0);\n    const moveRightRow = [];\n\n    for (let i = noZeroRow.length - 1; i >= 0; i--) {\n      const cell = noZeroRow[i];\n\n      if (cell === noZeroRow[i - 1]) {\n        moveRightRow.push(cell * 2);\n        updateScore(cell * 2);\n        i--;\n      } else {\n        moveRightRow.push(cell);\n      }\n    }\n\n    moveRightRow.reverse();\n\n    while (moveRightRow.length < 4) {\n      moveRightRow.unshift(0);\n    }\n\n    return moveRightRow;\n  }\n\n  function moveLeft(row) {\n    const noZeroRow = row.filter((cell) => cell !== 0);\n    const moveLeftRow = [];\n\n    for (let i = 0; i < noZeroRow.length; i++) {\n      const cell = noZeroRow[i];\n\n      if (cell === noZeroRow[i + 1]) {\n        moveLeftRow.push(cell * 2);\n        updateScore(cell * 2);\n        i++;\n      } else {\n        moveLeftRow.push(cell);\n      }\n    }\n\n    while (moveLeftRow.length < 4) {\n      moveLeftRow.push(0);\n    }\n\n    return moveLeftRow;\n  }\n\n  function emulateWinGame() {\n    const emulateBoard = [\n      [2, 4, 8, 16],\n      [32, 64, 128, 256],\n      [512, 1024, 2048, 0],\n      [0, 1024, 1024, 4096],\n    ];\n\n    board = emulateBoard;\n    renderBoard();\n  }\n\n  function emulateLoseGame() {\n    const emulateBoard = [\n      [2, 4, 2, 4],\n      [4, 2, 4, 2],\n      [2, 4, 8, 4],\n      [4, 8, 2, 0],\n    ];\n\n    board = emulateBoard;\n    renderBoard();\n  }\n\n  function gameOverCheck() {\n    //Find empty cell\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === 0) {\n          return;\n        }\n      }\n    }\n\n    //Check vertical marge\n    for (let i = 0; i < size - 1; i++) {\n      for (let j = 0; j < size; j++) {\n        if (board[i][j] === board[i + 1][j]) {\n          return;\n        }\n      }\n    }\n\n    //Check horizontal marge\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size - 1; j++) {\n        if (board[i][j] === board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n\n    loseMessage.classList.remove('hidden');\n  }\n\n  document.addEventListener('keydown', (event) => move(event.key));\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","addEventListener","updateScore","value","currentScore","currentScoreElem","textContent","winMessage","classList","remove","initializeGame","board","_to_consumable_array","_array_without_holes","isArray","size","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","fill","placeRandom","renderBoard","emptyCells","j","push","row","col","randomEmptyCell","Math","floor","random","cell","querySelector","concat","add","boardValue","cellValue","dataset","contains","move","direction","needRender","movedRow","moveLeft","i1","movedRow1","moveRight","i2","verticalRow","element","uppedVerticalRow","j1","gameOverCheck","console","log","emulateLoseGame","emulateWinGame","noZeroRow","filter","moveRightRow","reverse","unshift","moveLeftRow","j2","loseMessage","button","startMessage","event","key"],"version":3,"file":"index.320935e2.js.map"}